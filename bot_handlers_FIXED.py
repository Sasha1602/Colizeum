from datetime import datetime, timedelta
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from bot_instance import bot
from database import (
    execute_query,
    fetch_user_bookings,
    delete_booking,
    delete_all_user_bookings,
    check_availability,
    save_user_info,
    check_user_in_db,
    register_user,
    get_user_from_db,
    fetch_user_bookings_by_uid,
    delete_all_bookings_by_uid,
    delete_booking_by_id,
    get_payment_id_by_booking,
    set_payment_id,
    mark_booking_as_paid,
    fetch_paid_bookings,
    fetch_unpaid_bookings,
    get_booking_info,
    is_booking_already_saved,
    get_all_users,
    get_all_bookings,
    is_user_banned,
    ban_user,
    get_banned_users,
    unban_user,
    search_users_by_query,
    fetch_bookings_by_date
)
from utils import validate_phone, get_min_max_dates
from config import DB_CONFIG
import logging
from rules import RULES_PARTS
from payments import create_payment, check_payment_status
from config import ADMIN_ID, ADMIN_CHAT_ID
from payments import create_payment
from database import set_payment_id
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters  import StateFilter
from config import ADMINS
from aiogram.filters import BaseFilter
from aiogram.types import CallbackQuery


logging.basicConfig(level=logging.INFO)

class CancelReason(StatesGroup):
    waiting_for_reason = State()

class AdminSearch(StatesGroup):
    waiting_for_query = State()

admin_cancel_requests = {}

router = Router()

user_data = {}
user_step = {}

max_computers_per_zone = {
    "standart": 18,
    "bootkemp": 10,
    "ps5": 2,
}


full_zone_names = {
    "standart": "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª",
    "bootkemp": "–ë—É—Ç–∫–µ–º–ø",
    "ps5": "PlayStation 5",
}

zone_computer_mapping = {
    "standart": range(1, 19),        # –ü–ö 1‚Äì18
    "bootkemp": range(19, 29),   # –ü–ö 19‚Äì28
    "ps5": [29, 30],             # –ü–ö 29‚Äì30
}

ZONE_DURATION_PRICES = {
    "standart": {1: 120, 3: 300, 5: 490},
    "bootkemp": {1: 150, 3: 370, 5: 610},
    "ps5":      {1: 220, 3: 600, 5: 1000}
}

async def show_actions_to_user(user_id, bot):
    message = await bot.send_message(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    await show_actions(message)

def validate_computers(zone, computer_numbers):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–º–µ—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–æ–Ω–µ.
    """
    valid_numbers = zone_computer_mapping.get(zone, [])
    for num in computer_numbers:
        if int(num) not in valid_numbers:
            return False
    return True

async def show_zone_selection(call_or_message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª", callback_data="standart")],
            [InlineKeyboardButton(text="–ë—É—Ç–∫–µ–º–ø", callback_data="bootkemp")],
            [InlineKeyboardButton(text="PS5", callback_data="ps5")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    if hasattr(call_or_message, 'message'):
        await call_or_message.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–æ–Ω—É:", reply_markup=keyboard)
    else:
        await call_or_message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–æ–Ω—É:", reply_markup=keyboard)

async def send_week_calendar(uid, message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.
    """
    now = datetime.now()
    dates = [(now + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for date in dates:
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=date, callback_data=f"date:{date}")])
    
    zone = user_data[uid].get("selected_zone")
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_computers")])

    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

def choosing_actions(uid):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëæ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å üëæ", callback_data="book")],
            [InlineKeyboardButton(text="‚ö°Ô∏è –ú–æ–∏ –±—Ä–æ–Ω–∏ ‚ö°Ô∏è", callback_data="my_bookings")],
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å üí≥", callback_data="pay")],
            [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞ üìú", callback_data="rules")]
        ]
    )

    if uid in ADMINS:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_menu")]
        )
    return keyboard

async def safe_edit_reply_markup(message, reply_markup=None):
    try:
        await message.edit_reply_markup(reply_markup=reply_markup)
    except Exception as e:
        if "message is not modified" not in str(e).lower():
            raise

async def show_computer_selection(uid, message: Message):
    selected_zone = user_data[uid]["selected_zone"]
    valid_numbers = zone_computer_mapping[selected_zone]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(num), callback_data=f"computer:{num}")]
        for num in valid_numbers
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_number")
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

async def show_admin_menu(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –í—Å–µ –±—Ä–æ–Ω–∏", callback_data="admin_all_bookings")],
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="search_user")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="banned_users")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

@router.message(F.text.lower() == "/start")
async def start(message: Message):
    uid = message.from_user.id
    if await is_user_banned(uid):
        await message.answer("‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é
    if uid in ADMINS:
        await message.answer("üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await show_admin_menu(message)
        return

    if "nikname" in user_data.get(uid, {}):
        greeting = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_data[uid]['nikname']}!"
        await message.answer(greeting)
        await show_actions(message)
    else:
        greeting = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —ç—Ç–∏–º –±–æ—Ç–æ–º?"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="yes")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")]
            ]
        )
        await message.answer(greeting, reply_markup=keyboard)
        user_data[uid] = {}
        user_step[uid] = "awaiting_account"

@router.callback_query(F.data.in_({"yes", "no"}))
async def handle_registration(call: CallbackQuery):
    uid = call.from_user.id
    logging.info(f"User {uid} selected: {call.data}")
    if call.data == "yes":
        user_exists = await check_user_in_db(uid)
        logging.info(f"User {uid} exists in DB: {user_exists}")
        if user_exists:
            await call.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")
            await show_actions(call.message)
        else:
            await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
            user_step[uid] = "awaiting_new_phone"
    elif call.data == "no":
        user_exists = await check_user_in_db(uid)
        logging.info(f"User {uid} exists in DB: {user_exists}")
        if user_exists:
            await call.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")
            await show_actions(call.message)
        else:
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
            user_step[uid] = "awaiting_new_phone"
    await call.answer()

@router.message(F.func(lambda m: user_step.get(m.from_user.id) == "awaiting_nickname"))
async def get_nickname(message: Message):
    uid = message.from_user.id
    user_data[uid]["nikname"] = message.text.strip()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    user_step[uid] = "awaiting_phone"


@router.message(F.func(lambda m: user_step.get(m.from_user.id) == "awaiting_phone"))
async def get_phone(message: Message):
    uid = message.from_user.id
    phone_text = message.text.strip()
    if validate_phone(phone_text):
        user_data[uid]["telefhone"] = phone_text
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        await show_actions(message)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")


@router.message(F.func(lambda m: user_step.get(m.from_user.id) == "awaiting_new_phone"))
async def get_new_phone(message: Message):
    uid = message.from_user.id
    phone_text = message.text.strip()
    if validate_phone(phone_text):
        user_data[uid]["telefhone"] = phone_text
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")
        user_step[uid] = "awaiting_new_nickname"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")


@router.message(F.func(lambda m: user_step.get(m.from_user.id) == "awaiting_new_nickname"))
async def get_new_nickname(message: Message):
    uid = message.from_user.id
    nickname = message.text.strip()
    user_data[uid]["nikname"] = nickname
    phone_number = user_data[uid].get("telefhone", "")
    if not phone_number:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        return
    await register_user(uid, phone_number, nickname)
    await message.answer(f"–ù–∏–∫–Ω–µ–π–º '{nickname}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    await show_actions(message)
    user_step[uid] = None

@router.callback_query(F.data == "book")
async def handle_book_button(call: CallbackQuery):
    uid = call.from_user.id
    await call.answer()

    user_data.setdefault(uid, {})
    user_step[uid] = "awaiting_zone"

    await safe_edit_reply_markup(call.message, reply_markup=None)
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–æ–Ω—É:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª", callback_data="standart")],
                [InlineKeyboardButton(text="–ë—É—Ç–∫–µ–º–ø", callback_data="bootkemp")],
                [InlineKeyboardButton(text="PS5", callback_data="ps5")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        )
    )

@router.callback_query(F.data.in_(["standart", "bootkemp", "ps5"]))
async def handle_zone_selection(call: CallbackQuery):
    uid = call.from_user.id
    if user_step.get(uid) != "awaiting_zone":
        await call.answer("–ó–æ–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞", show_alert=True)
        return

    await process_zone_selection(uid, call.data, call.message)
    await call.answer()

@router.message(F.func(lambda m: user_step.get(m.from_user.id) == "awaiting_number_of_computers"))
async def ask_for_computer_numbers(message: Message):
    uid = message.from_user.id
    input_text = message.text.strip()

    if not input_text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    count = int(input_text)
    selected_zone = user_data[uid]["selected_zone"]
    max_computers = max_computers_per_zone[selected_zone]

    if count <= 0 or count > max_computers:
        await message.answer(
            f"–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ –±–æ–ª—å—à–µ {max_computers} –¥–ª—è –∑–æ–Ω—ã {selected_zone}."
        )
        return

    user_data[uid]["number_of_computers"] = count
    user_data[uid]["selected_computers"] = []
    user_step[uid] = "awaiting_computer_selection"

    await show_computer_selection(uid, message)

@router.callback_query(F.data.startswith("computer:"))
async def handle_computer_selection(call: CallbackQuery):
    uid = call.from_user.id
    if user_step.get(uid) != "awaiting_computer_selection":
        await call.answer("–≠—Ç–∞–ø —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω", show_alert=True)
        return

    computer_number = int(call.data.split(":")[1])

    user_data.setdefault(uid, {})
    user_data[uid].setdefault("selected_computers", [])

    if computer_number in user_data[uid]["selected_computers"]:
        await call.answer("‚ö†Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
        return

    user_data[uid]["selected_computers"].append(computer_number)
    await call.answer(f"‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä {computer_number} –≤—ã–±—Ä–∞–Ω.")

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–ö ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ‚úÖ –∏ —É–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    if len(user_data[uid]["selected_computers"]) >= user_data[uid].get("number_of_computers", 1):
        selected_comps = user_data[uid]["selected_computers"]
        label = ", ".join([f"–ü–ö {num}" for num in selected_comps])

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ü–ö —Å –≥–∞–ª–æ—á–∫–æ–π
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"‚úÖ –ü–ö {num}", callback_data="none")]
                for num in selected_comps
            ]
        )
        await call.message.edit_reply_markup(reply_markup=keyboard)

        await call.message.answer("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await send_week_calendar(uid, call.message)
        user_step[uid] = "awaiting_date"

@router.callback_query(F.data.startswith("date:"))
async def handle_date_selection(call: CallbackQuery):
    uid = call.from_user.id
    if user_step.get(uid) != "awaiting_date":
        await call.answer("–≠—Ç–∞–ø —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω", show_alert=True)
        return

    selected_date = call.data.split(":")[1]
    user_data[uid]["booking_date"] = selected_date
    user_step[uid] = "awaiting_time"

    # ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π —Å –≥–∞–ª–æ—á–∫–æ–π
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"‚úÖ {selected_date}", callback_data="none")]
        ]
    )
    await call.message.edit_reply_markup(reply_markup=keyboard)

    # üì§ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    await send_time_selection(uid, selected_date, call.message)
    await call.answer()

@router.callback_query(F.data.startswith("time:"))
async def handle_time_selection(call: CallbackQuery):
    uid = call.from_user.id
    if user_step.get(uid) != "awaiting_time":
        await call.answer("–≠—Ç–∞–ø —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω", show_alert=True)
        return

    parts = call.data.split(":")
    if len(parts) < 4:
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    _, date, hours, minutes = parts
    time = f"{hours}:{minutes}"

    try:
        datetime.strptime(time, "%H:%M")
    except ValueError:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.", show_alert=True)
        return

    user_data[uid]["selected_time"] = time
    user_data[uid]["booking_date"] = date
    user_step[uid] = "confirm_booking"

    await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"‚úÖ {time}", callback_data="none")]]
    ))

    data = user_data[uid]
    zone_name = full_zone_names.get(data.get("selected_zone"), "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    booking_details = (
        f"–î–∞—Ç–∞: {data['booking_date']}, –í—Ä–µ–º—è: {data['selected_time']}\n"
        f"–ó–æ–Ω–∞: {zone_name}"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 —á–∞—Å", callback_data="duration:1")],
            [InlineKeyboardButton(text="3 —á–∞—Å–∞", callback_data="duration:3")],
            [InlineKeyboardButton(text="5 —á–∞—Å–∞", callback_data="duration:5")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_date")]
        ]
    )
    await call.message.answer("‚è± –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("duration:"))
async def handle_duration_selection(call: CallbackQuery):
    uid = call.from_user.id
    duration = int(call.data.split(":")[1])

    user_data[uid]["duration"] = duration
    user_step[uid] = "confirm_booking"

    await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"‚úÖ {duration} —á.", callback_data="none")]]
    ))

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—Ä–æ–Ω–∏
    data = user_data[uid]
    zone_name = full_zone_names.get(data.get("selected_zone"), "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    booking_details = (
        f"–î–∞—Ç–∞: {data['booking_date']}, –í—Ä–µ–º—è: {data['selected_time']}\n"
        f"–ó–æ–Ω–∞: {zone_name}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —á."
    )

    await call.message.answer(
        booking_details,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å", callback_data="confirm_booking")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancelation")]
            ]
        )
    )
    await call.answer()

@router.callback_query(F.data == "confirm_booking")
async def confirm_booking(call: CallbackQuery):
    uid = call.from_user.id
    try:
        if uid not in user_data:
            logging.error(f"User {uid} not found in user_data during booking confirmation.")
            await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return

        data = user_data[uid]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        user_db_data = await get_user_from_db(uid)
        data["nikname"] = user_db_data.get("nickname")
        data["telefhone"] = user_db_data.get("phone")

        required_fields = [
            "nikname", "telefhone", "selected_zone", "number_of_computers",
            "selected_time", "booking_date", "selected_computers"
        ]

        missing_fields = [field for field in required_fields if not data.get(field)]
        if missing_fields:
            missing_fields_str = ", ".join(missing_fields)
            logging.warning(f"User {uid} is missing required fields: {missing_fields_str}")
            await call.message.answer(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {missing_fields_str}."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        available = True
        conflicts = []
        if data["selected_zone"] not in ["ps5"]:
            computer_ids = data["selected_computers"]
            booking_date = data["booking_date"]
            booking_time = data["selected_time"]
            duration = data["duration"]
            available, conflicts = await check_availability(computer_ids, booking_date, booking_time, duration)

        if not available:
            logging.warning(f"User {uid} tried to book unavailable computers: {conflicts}")
            conflict_lines = [f"–ü–ö ‚Ññ{comp} –∑–∞–Ω—è—Ç –¥–æ {end_time}" for comp, end_time in conflicts]
            conflict_text = "\n".join(conflict_lines)

            await call.message.answer(
                f"‚ùå –ë—Ä–æ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                f"–°–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã –Ω–∞ {data['booking_date']} —Å {data['selected_time']} "
                f"–Ω–∞ {data['duration']} —á.:\n\n"
                f"{conflict_text}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã."
            )

            data.pop("selected_computers", None)
            data.pop("selected_time", None)
            data.pop("booking_date", None)
            user_step[uid] = "awaiting_computer_selection"

            selected_zone = data["selected_zone"]
            valid_numbers = range(1, 19) if selected_zone == "standart" else (
                range(19, 29) if selected_zone == "bootkemp" else range(29, 31)
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=str(num), callback_data=f"computer:{num}")]
                for num in valid_numbers
            ])
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_zone")
            ])

            await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –∑–∞–Ω–æ–≤–æ:", reply_markup=keyboard)
            return

        # –í—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        logging.info(f"User {uid} successfully booked: {data}")
        booking_date = data["booking_date"]
        booking_time = data["selected_time"]
        zone = full_zone_names.get(data["selected_zone"], data["selected_zone"])
        nickname = data["nikname"]
        phone = data["telefhone"]
        computers = data["selected_computers"]
        comp_str = f"–ü–ö: {', '.join(map(str, computers))}" if computers else "–ö–æ–Ω—Å–æ–ª—å"

        admin_text = (
            f"üì• *–ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω—å:*\n"
            f"üë§ `{nickname}` | üì± `{phone}`\n"
            f"üóì {booking_date} ‚è∞ {booking_time} –Ω–∞ {data['duration']} —á.\n"
            f"üñ• {zone} | {comp_str}"
        )

        markup = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"admin_confirm:{uid}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"admin_cancel:{uid}")
        ]])

        await call.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text, reply_markup=markup, parse_mode="Markdown")
        await call.message.answer("üïê –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    except Exception as e:
        logging.error(f"Error confirming booking for user {uid}: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await call.answer()

@router.callback_query(F.data == "cancellation")
async def handle_cancellation(call: CallbackQuery):
    uid = call.from_user.id
    phone_number = user_data[uid].get("telefhone", "")
    nickname = user_data[uid].get("nikname", "")
    bookings = await fetch_user_bookings(phone_number, nickname)
    if not bookings:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
        return
    markup = InlineKeyboardMarkup()
    for booking in bookings:
        try:
            booking_id, date, time, zone, computers = booking
            if computers is not None:
                button_text = f"{date.strftime('%d.%m.%Y')}, {time}, –ó–æ–Ω–∞: {zone},  –ö–æ–º–ø—å—é—Ç–µ—Ä—ã: {computers}"
            else:
                button_text = f"{date.strftime('%d.%m.%Y')}, {time}, {zone}"
            markup.add(InlineKeyboardButton(text=button_text, callback_data=f"cancel_{booking_id}"))
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    markup.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="cancel_all"))
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—å –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Å–µ —Å—Ä–∞–∑—É:", reply_markup=markup
    )
    await call.answer()

async def show_actions(message: Message):
    keyboard = choosing_actions(message.from_user.id)

    try:
        await message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    except Exception:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.callback_query(F.data == "cancelation")
async def handle_cancel_booking_from_confirmation(call: CallbackQuery):
    uid = call.from_user.id

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.pop(uid, None)
    user_step[uid] = None

    await safe_edit_reply_markup(call.message, reply_markup=None)
    await call.message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_actions(call.message)
    await call.answer()


@router.callback_query(F.data == "cancel_booking")
async def handle_cancel_booking(call: CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = "cancelling"

    bookings = await fetch_user_bookings_by_uid(uid)

    if not bookings:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[])

    for booking in bookings:
        booking_id, booking_date, booking_time, zone, computers = booking
        button_text = f"{booking_date.strftime('%d.%m.%Y')} {booking_time} | {zone} | –ü–ö: {computers or 'N/A'}"
        markup.inline_keyboard.append([
            InlineKeyboardButton(text=button_text, callback_data=f"cancel:{booking_id}")
        ])

    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="cancel_all")
    ])

    markup.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ])

    
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=markup)

@router.callback_query(F.data.startswith("cancel:"))
async def handle_cancel_specific_booking(call: CallbackQuery):
    uid = call.from_user.id
    booking_id = call.data.split(":")[1]

    # 1. –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω—å –î–û —É–¥–∞–ª–µ–Ω–∏—è
    booking = await execute_query(
        "SELECT booking_date, booking_time, zone, computers FROM UserInfo WHERE id = %s",
        (booking_id,),
        fetch=True
    )

    # 2. –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω—å
    await delete_booking_by_id(booking_id)
    await call.answer("‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = call.message.reply_markup
    new_keyboard = []

    for row in markup.inline_keyboard:
        new_row = [btn for btn in row if btn.callback_data != f"cancel:{booking_id}"]
        if new_row:
            new_keyboard.append(new_row)

    await call.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard)
    )

    # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –±—Ä–æ–Ω—å –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞)
    if booking:
        booking_date, booking_time, zone, computers, duration  = booking[0]
        user = await get_user_from_db(uid)
        zone_name = full_zone_names.get(zone, zone)
        comp_str = f"–ü–ö: {computers}" if computers else "–ö–æ–Ω—Å–æ–ª—å"

        admin_text = (
            f"‚ö†Ô∏è *–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:*\n"
            f"üë§ `{user.get('nickname')}` | üì± `{user.get('phone')}`\n"
            f"üóì {booking_date} ‚è∞ {booking_time} –Ω–∞ {duration} —á.\n"
            f"üñ• {zone_name} | {comp_str}\n"
        )

        try:
            await call.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text, parse_mode="Markdown")
        except Exception as e:
            logging.warning(f"[CANCEL_NOTIFY] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")

@router.callback_query(F.data == "cancel_all")
async def handle_cancel_all_bookings(call: CallbackQuery):
    uid = call.from_user.id
    if user_step.get(uid) != "cancelling":
        await call.answer("–≠—Ç–∞–ø —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω", show_alert=True)
        return

    await delete_all_bookings_by_uid(uid)
    await call.message.answer("‚úÖ –í—Å–µ –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    await show_actions(call.message)
    user_step[uid] = None

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def handle_back_to_menu(call: CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = None
    await call.message.edit_reply_markup(reply_markup=None)
    await show_actions(call.message)
    await call.answer()

@router.callback_query(F.data == "back_to_date")
async def handle_back_to_date(call: CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = "awaiting_date"
    user_data[uid].pop("selected_time", None)
    await call.message.edit_reply_markup(reply_markup=None)
    await send_week_calendar(uid, call.message)
    await call.answer()


@router.message(StateFilter(None))
async def handle_any_message(message: Message, state: FSMContext):
    uid = message.from_user.id
    current_state = await state.get_state()

    if uid in ADMINS and current_state != AdminSearch.waiting_for_query.state:
        return

    user_exists = await check_user_in_db(uid)

    if user_exists:
        await show_actions(message)
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@router.callback_query(F.data == "back_to_number")
async def handle_back_to_number(call: CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = "awaiting_number_of_computers"
    user_data[uid].pop("number_of_computers", None)
    user_data[uid].pop("selected_computers", None)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?")
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
@router.callback_query(F.data == "back_to_computers")
async def handle_back_to_computers(call: CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = "awaiting_computer_selection"
    user_data[uid].pop("booking_date", None)
    user_data[uid].pop("selected_time", None)
    user_data[uid]["selected_computers"] = []

    selected_zone = user_data[uid]["selected_zone"]
    valid_numbers = zone_computer_mapping[selected_zone]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(num), callback_data=f"computer:{num}")]
        for num in valid_numbers
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_number")
    ])

    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data == "back_to_zone")
async def handle_back_to_zone(call: CallbackQuery):
    uid = call.from_user.id

    # –ß–∏—Å—Ç–∏–º –≤—Å—ë –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–æ–Ω—ã
    for field in ["selected_zone", "number_of_computers", "selected_computers", "booking_date", "selected_time"]:
        user_data[uid].pop(field, None)

    user_step[uid] = "awaiting_zone"

    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª", callback_data="standart")],
                [InlineKeyboardButton(text="–ë—É—Ç–∫–µ–º–ø", callback_data="bootkemp")],
                [InlineKeyboardButton(text="PS5", callback_data="ps5")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )
    )
    await call.answer()

@router.callback_query(F.data == "rules")
async def handle_rules(call: CallbackQuery):
    await call.answer()

    for i, part in enumerate(RULES_PARTS):
        if i == len(RULES_PARTS) - 1:
            await call.message.answer(part, parse_mode="HTML", reply_markup=rules_back_keyboard)
        else:
            await call.message.answer(part, parse_mode="HTML")

rules_back_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
)

async def process_zone_selection(uid: int, selected_zone: str, message: Message):
    user_data[uid]["selected_zone"] = selected_zone
    user_step[uid] = "awaiting_number_of_computers"

    selected_text = f"‚úÖ {full_zone_names.get(selected_zone, selected_zone)}"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=selected_text, callback_data="none")]
        ]
    )
    await message.edit_reply_markup(reply_markup=keyboard)

    user_step[uid] = "awaiting_number_of_computers"
    await message.answer(
        f"–°–∫–æ–ª—å–∫–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?\n\n"
        f"–í –∑–æ–Ω–µ ¬´{full_zone_names[selected_zone]}¬ª –¥–æ—Å—Ç—É–ø–Ω–æ {max_computers_per_zone[selected_zone]} —É—Å—Ç—Ä–æ–π—Å—Ç–≤.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_zone")]]
        )
    )

async def send_time_selection(uid: int, selected_date: str, message: Message):
    now = datetime.now()
    times_list = []
    start_hour = 0 if datetime.strptime(selected_date, "%d.%m.%Y").date() != now.date() else now.hour + 1

    for hour in range(start_hour, 24):
        for minute in [0, 30]:
            time_string = f"{hour:02}:{minute:02}"
            callback_data = f"time:{selected_date}:{time_string}"
            times_list.append(InlineKeyboardButton(text=time_string, callback_data=callback_data))

    markup = InlineKeyboardMarkup(inline_keyboard=[])

    for i in range(0, len(times_list), 6):
        markup.inline_keyboard.append(times_list[i:i + 6])

    markup.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="back_to_date")
    ])

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=markup
    )

@router.callback_query(F.data.startswith("pay:"))
async def handle_payment_prompt(call: CallbackQuery):
    uid = call.from_user.id
    parts = call.data.split(":")
    if len(parts) != 3:
        await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    booking_id, zone = parts[1], parts[2]
    duration = user_data[uid].get("duration", 1)
    price = ZONE_DURATION_PRICES.get(zone, {}).get(duration, 100)

    await call.message.answer(
        f"üí≥ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±—Ä–æ–Ω—å –Ω–∞ —Å—É–º–º—É {price}‚ÇΩ?\n"
        f"–ó–æ–Ω–∞: {full_zone_names.get(zone, zone.upper())}, –Ω–∞ {duration} —á.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_pay:{booking_id}:{zone}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="back_to_pay_selection")]
        ])
    )
    await call.answer()

@router.callback_query(F.data == "pay")
async def show_unpaid_bookings(call: CallbackQuery):
    uid = call.from_user.id
    bookings = await fetch_user_bookings_by_uid(uid)
    if not bookings:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for booking in bookings:
        booking_id, date, time, zone, _, duration = booking

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ –∑–æ–Ω–µ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        price = ZONE_DURATION_PRICES.get(zone, {}).get(duration, 100)

        # –ú–µ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
        label = f"{date.strftime('%d.%m.%Y')} –≤ {time} ‚Äî {zone.upper()} ‚Äî {duration} —á. ‚Äî {price}‚ÇΩ"
        markup.inline_keyboard.append([InlineKeyboardButton(
            text=label,
            callback_data=f"pay:{booking_id}:{zone}"
        )])

    markup.inline_keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—å –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

@router.callback_query(F.data.startswith("confirm_pay:"))
async def confirm_pay(call: CallbackQuery):
    uid = call.from_user.id

    parts = call.data.split(":")
    if len(parts) != 3:
        await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    booking_id, zone = parts[1], parts[2]
    duration = user_data.get(uid, {}).get("duration", 1)
    price = ZONE_DURATION_PRICES.get(zone, {}).get(duration, 100)

    user = await get_user_from_db(call.from_user.id)
    if not user:
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")
        return

    description = f"–û–ø–ª–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{booking_id} ({zone.upper()})"
    return_url = "https://t.me/Playschamp_Bot"

    try:
        payment_url, payment_yk_id = create_payment(price, description, return_url)
        await set_payment_id(booking_id, payment_yk_id)

        await call.message.answer(
            f"üí∏ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n{payment_url}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_payment:{booking_id}")]])
        )
    except Exception as e:
        print(f"[PAY ERROR] {e}")
        await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await call.answer()

@router.callback_query(F.data == "back_to_pay_selection")
async def back_to_payment_list(call: CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=None)
    await show_unpaid_bookings(call)
    await call.answer()

@router.callback_query(F.data.startswith("confirm_payment:"))
async def confirm_payment_status(call: CallbackQuery):
    from payments import check_payment_status
    uid = call.from_user.id
    booking_id = call.data.split(":")[1]

    payment_id = await get_payment_id_by_booking(booking_id)
    if not payment_id:
        await call.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ.")
        return

    status = check_payment_status(payment_id)
    if status == "succeeded":
        await mark_booking_as_paid(booking_id)
        await call.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë—Ä–æ–Ω—å –∞–∫—Ç–∏–≤–Ω–∞.")
        await show_actions(call.message)
    
        # üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        user = await get_user_from_db(uid)
        booking_info = await get_booking_info(booking_id)  # –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
    
        if booking_info:
            booking_date, booking_time, zone, computers, duration  = booking_info
            zone_name = full_zone_names.get(zone, zone)
            comp_str = f"–ü–ö: {computers}" if computers else "–ö–æ–Ω—Å–æ–ª—å"
    
            admin_text = (
                f"üí∞ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:*\n"
                f"üë§ `{user.get('nickname')}` | üì± `{user.get('phone')}`\n"
                f"üóì {booking_date} ‚è∞ {booking_time} –Ω–∞ {duration} —á.\n"
                f"üñ• {zone_name} | {comp_str}\n"
            )
    
            await call.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text, parse_mode="Markdown")
    elif status == "pending":
        await call.message.answer("‚åõ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
    else:
        await call.message.answer(f"‚ùå –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}. –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

@router.callback_query(F.data == "my_bookings")
async def handle_my_bookings(call: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ ‚úÖ", callback_data="paid_bookings")],
        [InlineKeyboardButton(text="üí∏ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ üí∏", callback_data="unpaid_bookings")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:", reply_markup=markup)

@router.callback_query(F.data == "unpaid_bookings")
async def handle_unpaid_bookings(call: CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = "cancelling"

    bookings = await fetch_unpaid_bookings(uid)

    if not bookings:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[])

    for booking in bookings:
        booking_id, date, time, zone, computers = booking

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        date_str = date.strftime('%d.%m') if hasattr(date, 'strftime') else str(date)[:5]
        if hasattr(time, 'strftime'):
            time_str = time.strftime('%H:%M')
        else:
            parts = str(time).split(":")
            time_str = f"{parts[0]}:{parts[1]}" if len(parts) >= 2 else str(time)
        zone_name = full_zone_names.get(zone, zone)  # ‚Üê –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã
        comp_str = str(computers) if computers else ""

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"{date_str} | {time_str} | {zone_name} | {comp_str}".strip(" |")

        markup.inline_keyboard.append([
            InlineKeyboardButton(text=button_text, callback_data=f"cancel:{booking_id}")
        ])

    markup.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    ])

    await call.message.answer("üßæ –í–∞—à–∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏:", reply_markup=markup)

@router.callback_query(F.data == "paid_bookings")
async def handle_my_bookings(call: CallbackQuery):
    uid = call.from_user.id
    bookings = await fetch_paid_bookings(uid)

    if not bookings:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
        return

    text = "üßæ –í–∞—à–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏:\n\n"
    for booking in bookings:
        date, time, zone, computers = booking

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        parts = []

        # –î–∞—Ç–∞
        if date:
            date_str = date.strftime('%d.%m.%Y') if hasattr(date, 'strftime') else str(date)
            parts.append(date_str)

        # –í—Ä–µ–º—è
        if time:
            time_str = time.strftime('%H:%M') if hasattr(time, 'strftime') else str(time)[:5]
            parts.append(time_str)

        # –ó–æ–Ω–∞
        if zone:
            zone_name = full_zone_names.get(zone, zone)
            parts.append(zone_name)

        # –ö–æ–º–ø—å—é—Ç–µ—Ä—ã
        if computers:
            parts.append(str(computers))

        text += "‚Ä¢ " + " | ".join(parts) + "\n"

    markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    )
    await call.message.answer(text, reply_markup=markup)

@router.callback_query(F.data.startswith("admin_confirm:"))
async def admin_confirm_booking(call: CallbackQuery):
    if call.from_user.id not in ADMINS:
        await call.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.", show_alert=True)
        return

    uid = int(call.data.split(":")[1])
    data = user_data.get(uid)

    if not data:
        await call.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ë–ê–ó–ï, –∞ –Ω–µ –ø–æ user_data
    already_saved = await is_booking_already_saved( uid, data["booking_date"], data["selected_time"])
    if already_saved:
        await call.answer("–≠—Ç–∞ –±—Ä–æ–Ω—å —É–∂–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", show_alert=True)
        return

    data["confirmed_by_admin"] = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é

    await save_user_info(uid, data)
    await call.answer("‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞!", show_alert=True)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await call.bot.send_message(
            chat_id=uid,
            text="‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
        )
        await show_actions_to_user(uid, call.bot)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")

    # –£–¥–∞–ª–µ–Ω–∏–µ inline-–∫–Ω–æ–ø–∫–∏
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å inline-–∫–Ω–æ–ø–∫—É: {e}")

@router.callback_query(F.data.startswith("admin_cancel:"))
async def handle_admin_cancel_start(call: CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMINS:
        await call.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    uid = int(call.data.split(":")[1])
    logging.info(f"[admin_cancel_start] –ê–¥–º–∏–Ω: {call.from_user.id}, –¶–µ–ª–µ–≤–æ–π UID: {uid}")
    admin_cancel_requests[call.from_user.id] = uid

    await call.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.set_state(CancelReason.waiting_for_reason)
    await call.answer()

@router.message(StateFilter(CancelReason.waiting_for_reason))
async def handle_admin_cancel_reason(message: Message, state: FSMContext):
    print("‚ùó –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–ß–ò–ù–´ –í–´–ó–í–ê–ù")
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    logging.info(f"[admin_cancel_reason] triggered by admin {message.from_user.id}")
    admin_id = message.from_user.id
    reason = message.text.strip()
    target_uid = admin_cancel_requests.pop(admin_id, None)
    logging.info(f"[admin_cancel_reason] target_uid: {target_uid}, reason: {reason}")

    if target_uid:
        await message.answer("‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        try:
            await bot.send_message(target_uid, f"üö´ –í–∞—à–∞ –±—Ä–æ–Ω—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            await show_actions_to_user(target_uid, bot)
            await bot.send_message(admin_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
        except Exception as e:
            logging.error(f"[admin_cancel_reason] Failed to send message: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    await state.clear()

@router.callback_query(F.data == "admin_all_bookings")
async def handle_admin_all_bookings(call: CallbackQuery):
    bookings = await fetch_bookings_by_date()

    if not bookings:
        await call.message.answer("üì≠ –ë—Ä–æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º
    bookings_by_date = {}
    for booking in bookings:
        booking_date = booking[0]  # booking_date
        if booking_date not in bookings_by_date:
            bookings_by_date[booking_date] = []
        bookings_by_date[booking_date].append(booking)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for booking_date, booking_list in bookings_by_date.items():
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
        formatted_date = booking_date.strftime("%d.%m.%Y")
        button_text = f"–ë—Ä–æ–Ω–∏ –Ω–∞ {formatted_date}"
        button_data = f"view_bookings:{formatted_date}"
        
        markup.inline_keyboard.append([
            InlineKeyboardButton(text=button_text, callback_data=button_data)
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    ])

    await call.message.answer("üìã –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º:", reply_markup=markup)
    await call.answer()


@router.callback_query(F.data == "admin_users")
async def handle_admin_users(call: CallbackQuery):
    users = await execute_query("SELECT id, nickname, phone FROM users ORDER BY id", fetch=True)

    if not users:
        await call.message.answer("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[])

    for uid, nickname, phone in users:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–µ—Ç–∞–ª–æ
        nickname = nickname or "‚ùì"
        phone = phone or "‚ùì"

        btn = InlineKeyboardButton(
            text=f"{nickname} | {phone}",
            callback_data=f"ban_user:{uid}"
        )
        markup.inline_keyboard.append([btn])  # –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ‚Äî –æ–¥–∏–Ω —Ä—è–¥

    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_btn = InlineKeyboardButton(
        text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é",
        callback_data="admin_menu"
    )
    markup.inline_keyboard.append([back_btn])

    await call.message.answer("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=markup)
    await call.answer()

@router.callback_query(F.data.startswith("ban_user:"))
async def handle_ban_unban_user(call: CallbackQuery):
    uid = int(call.data.split(":")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await execute_query("SELECT is_banned, nickname FROM Users WHERE id = %s", (uid,), fetch=True)

    if not user_data:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
    is_banned = user_data[0][0]  # `user_data` ‚Äî —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂, [0][0] –±—É–¥–µ—Ç –±—Ä–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    nickname = user_data[0][1]   # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è nickname

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –±–∞–Ω–∏–º
    if is_banned:
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await unban_user(uid)
        await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ban_user(uid)
        await call.message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    await call.answer()



@router.callback_query(F.data == "admin_menu")
async def handle_admin_menu_entry(call: CallbackQuery):
    await show_admin_menu(call.message)
    await call.answer()

@router.callback_query(F.data == "search_user")
async def start_search_user(call: CallbackQuery, state: FSMContext):
    await state.set_state(AdminSearch.waiting_for_query)
    await call.message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await call.answer()

@router.message(AdminSearch.waiting_for_query)
async def search_user_input(message: Message, state: FSMContext):
    query = message.text.strip()
    like_query = f"%{query}%"

    users = await search_users_by_query(message.text.strip())

    if not users:
        await message.answer("üòï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for uid, nickname, phone in users:
            btn = InlineKeyboardButton(
                text=f"{nickname or '‚ùì'} | {phone or '‚ùì'}",
                callback_data=f"ban_user:{uid}"
            )
            markup.inline_keyboard.append([btn])
        markup.inline_keyboard.append([
            InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
        ])
        await message.answer("üë• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", reply_markup=markup)

    await state.clear()

@router.callback_query(F.data == "banned_users")
async def handle_banned_users(call: CallbackQuery):
    users = await get_banned_users()
    if not users:
        await call.message.answer("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for uid, nickname, phone, is_banned in users:
        nickname = nickname or "‚ùì"
        phone = phone or "‚ùì"
        status = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_banned else "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"  # –ú–æ–∂–µ–º –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        btn = InlineKeyboardButton(
            text=f"{nickname} | {phone} | {status}",
            callback_data=f"ban_user:{uid}"  # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞
        )
        markup.inline_keyboard.append([btn])

    markup.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    ])

    await call.message.answer("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=markup)
    await call.answer()

@router.callback_query(F.data.startswith("view_bookings:"))
async def handle_view_bookings_by_date(call: CallbackQuery):
    selected_date = call.data.split(":")[1]
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É
    selected_date = datetime.strptime(selected_date, "%d.%m.%Y").date()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    bookings = await execute_query(
        "SELECT booking_time, zone, computers, user_id FROM UserInfo WHERE booking_date = %s ORDER BY booking_time",
        (selected_date,),
        fetch=True
    )

    if not bookings:
        await call.message.answer(f"‚ùå –ù–µ—Ç –±—Ä–æ–Ω–µ–π –Ω–∞ {selected_date}.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = f"üìã –ë—Ä–æ–Ω–∏ –Ω–∞ {selected_date.strftime('%d.%m.%Y')}:\n\n"
    for booking in bookings:
        booking_time = booking[0]
        zone = booking[1]
        computers = booking[2] if booking[2] else "–ö–æ–Ω—Å–æ–ª—å"
        user_id = booking[3]
        user = await get_user_from_db(user_id)
        nickname = user.get("nickname", "???")
        
        text += f"‚è∞ –í—Ä–µ–º—è: {booking_time}, –ó–æ–Ω–∞: {zone}, {computers} ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {nickname}\n"

    await call.message.answer(text)
    await call.answer()
